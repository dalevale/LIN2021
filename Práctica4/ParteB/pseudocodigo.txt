mutex mtx;
condvar prod, cons;
int prod_count=0, cons_count=0;
struct kfifo cbuffer;

void fifoproc_open(bool abre_para_lectura) {
	if(abra_para_lectura){
		
		lock(mtx);
		
		cons_count++;

		/* Esperar a que haya un productor si no hay ninguno, sino, despertarlo. */
		if(prod_count==0) { cond_wait(cons, mtx); }
		else { cond_signal(prod); }
		
		unlock(mtx);
	
	} else {
		
		lock(mtx);

		prod_count++;

		/* Esperar a que haya un consumidor si no hay ninguno, sino, despertarlo. */
		if(cons_count==0) { cond_wait(prod, mtx); }
		else { cond_signal(cons); }

		unlock(mtx);
	}
}

int fifoproc_write(char* buff, int len) {
	char kbuffer[MAX_KBUF];

	if (len > MAX_CBUFFER_LEN || len > MAX_KBUF) { return Error; }
	if (copy_from_user(kbuffer, buff, len)) { return Error; }

	lock(mtx);

	/* Esperar hasta que haya hueco para insertar (debe haber consumidores) */	
	while (kfifo_avail(&cbuffer) < len && cons_count > 0) {
		cond_wait(prod, mtx);
	}

	/* Detectar fin de comunicacion por error (consumidor cierra FIFO antes) */
	if (cons_count==0) { unlock(mtx); return -EPIPE; }

	kfifo_in(&cbuffer, kbuffer, len);

	/* Despertar a posible consumidor bloqueado */
	cond_signal(cons);

	unlock(mtx);
	return len;
}

int fifoproc_read(const char* buff, int len) {
	char kbuffer[MAX_KBUF];

	if (len > MAX_CBUFFER_LEN || len > MAX_KBUF) { return Error; }

	lock(mtx);

	/* Esperar hasta que haya caracteres para sacar (debe haber productores) */	
	while (kfifo_len(&cbuffer) < len && prod_count > 0) {
		cond_wait(prod, mtx);
	}

	/* Detectar fin de comunicacion por error (productor cierra FIFO antes) */
	if (prod_count==0) { unlock(mtx); return -EPIPE; }

	kfifo_out(&cbuffer, kbuffer, len);

	/* Despertar a posible productor bloqueado */
	cond_signal(prod);

	if (copy_to_user(kbuffer, buff, len)) { return Error; }

	unlock(mtx);
	return len;
}

void fifoproc_release(bool lectura){
	
	lock(mtx);

	if(lectura){ cond_count--; }
	else { prod_count--; }

	if(cond_count==0 && prod_count==0) {
		kfifo_reset(&cbuffer);
	}


}